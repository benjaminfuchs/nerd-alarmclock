# --------------------------------------------------------------------------
# Class definition of FlaskThread - this thread controls the Flask Framework
#
# Author: Benjamin Fuchs
# License: GPL3
#
# Website: https://github.com/bablokb/nerd-alarmclock
#
# --------------------------------------------------------------------------

from flask import Flask, jsonify, request
from flask.views import MethodView
import requests

class FlaskThread(Thread):
  """ Flask thread """
  # constants   ------------------------------------------------------------

  DEBUG  = True

  # initialize object   ----------------------------------------------------

  def __init__(self, app, port):
    """ Constructor """
    super(FlaskThread,self).__init__(name="FlaskThread")
    self._app = app
    self._port = port

  def run(self):
    self._app.run(debug=FlaskThread.DEBUG, use_reloader=False, port=self._port)

class TimeAPI(MethodView):
  """ Time API """

  # initialize object   ----------------------------------------------------

  def __init__(self, settings):
    """ Constructor """

    self._settings   = settings

  def post(self):
    """ handle post requests """

    self._settings.log.msg("WebThread: /time")
    cfg  = "alarm.1.time"
    self._settings.set(cfg,request.json['time'])
    return "Time updated successfully!"

class ShutdownAPI(MethodView):
  """ Shutdown API """

  # initialize object   ----------------------------------------------------

  def __init__(self, settings):
    """ Constructor """

    self._settings   = settings

  def get(self):
    """ handle post requests """

    self._settings.log.msg("WebThread: /shutdown")
    func = request.environ.get('werkzeug.server.shutdown')
    if func is None:
        raise RuntimeError('Not running with the Werkzeug Server')
    func()
    return "Shutting down ..."
