#!/usr/bin/python3
# --------------------------------------------------------------------------
# Class definition of SRF02
#
# Author: Benjamin Fuchs
# License: GPL3
#
# Website: https://github.com/benjaminfuchs/who_disposer
#
# --------------------------------------------------------------------------

import datetime
import smbus
import time
from threading import Thread

class SRF02(Thread):
    """ Sensor class """

    def __init__(self, address, threshold):
        """ Constructor """
        super(SRF02, self).__init__(name="SRF02")

        self._listeners = []
        self._i2c = smbus.SMBus(1)
        self._threshold = threshold
        self._address = 0x70
        self._i2c.write_byte_data(self._address, 0, 96)
        self._distance = 255
        self._run = True

    def add_listener(self, function):
        self._listeners.append(function)

    def run(self):
        """ get current distance """
        state = "off"
        while self._run:
            self._i2c.write_byte_data(self._address, 0, 81)
            time.sleep(0.07)
            distance = self._i2c.read_word_data(self._address, 2) / 255

            if state == "off" and distance < self._threshold:
                state = "on"

                for listener in self._listeners:
                    listener(state)
            elif state == "on":
                state = "off"

                for listener in self._listeners:
                    listener(state)
            time.sleep(0.1)

    def stop(self):
        self._run = False

    def calibrate(self):
        time.sleep(2)