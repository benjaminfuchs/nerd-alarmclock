#!/usr/bin/python3
# --------------------------------------------------------------------------
# Class definition of HCSR04
#
# Author: Benjamin Fuchs
# License: GPL3
#
# Website: https://github.com/benjaminfuchs/who_disposer
#
# --------------------------------------------------------------------------

import datetime
import RPi.GPIO as GPIO
import time
from threading import Thread


class HCSR04(Thread):
    """ Sensor class """

    def __init__(self, pin_trigger, pin_echo, threshold):
        """ Constructor """
        super(HCSR04, self).__init__(name="HCSR04")

        self._pin_trigger = pin_trigger
        self._pin_echo = pin_echo
        self._threshold = threshold
        self._listeners = []

        GPIO.setmode(GPIO.BCM)
        GPIO.setup(self._pin_trigger, GPIO.OUT)
        GPIO.setup(self._pin_echo, GPIO.IN)

        GPIO.output(self._pin_trigger, GPIO.LOW)
        time.sleep(2)
        self._run = True

    def add_listener(self, function):
        self._listeners.append(function)

    def run(self):
        state == "off"
        while self._run:
            GPIO.output(self._pin_trigger, GPIO.HIGH)
            time.sleep(0.00001)
            GPIO.output(self._pin_trigger, GPIO.LOW)
            pulse_start_time = 0

            while GPIO.input(self._pin_echo) == 0:
                pulse_start_time = time.time()
            while GPIO.input(self._pin_echo) == 1:
                pulse_end_time = time.time()

            pulse_duration = pulse_end_time - pulse_start_time
            distance = round(pulse_duration * 17150, 2)

            if state == "off" and distance < self._threshold:
                state = "on"

                for listener in self._listeners:
                    listener(state)
            elif state == "on":
                state == "off"
                
                for listener in self._listeners:
                    listener(state)
            time.sleep(0.1)

    def stop(self):
        self._run = False
