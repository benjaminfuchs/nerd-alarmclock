#!/usr/bin/python3
# --------------------------------------------------------------------------
# Class definition of HCSR04
#
# Author: Benjamin Fuchs
# License: GPL3
#
# Website: https://github.com/benjaminfuchs/who_disposer
#
# --------------------------------------------------------------------------

import datetime
import RPi.GPIO as GPIO
import time
from threading import Thread


class HCSR04(Thread):
    """ Sensor class """

    def __init__(self, pin_trigger, pin_echo):
        """ Constructor """
        super(HCSR04, self).__init__(name="HCSR04")

        self._pin_trigger = pin_trigger
        self._pin_echo = pin_echo
        self._distance = 0

        GPIO.setmode(GPIO.BCM)
        GPIO.setup(self._pin_trigger, GPIO.OUT)
        GPIO.setup(self._pin_echo, GPIO.IN)

        GPIO.output(self._pin_trigger, GPIO.LOW)
        time.sleep(2)

    def run(self):
        GPIO.output(self._pin_trigger, GPIO.HIGH)
        time.sleep(0.00001)
        GPIO.output(self._pin_trigger, GPIO.LOW)
        pulse_start_time = 0

        while GPIO.input(self._pin_echo) == 0:
            pulse_start_time = time.time()
        while GPIO.input(self._pin_echo) == 1:
            pulse_end_time = time.time()

        pulse_duration = pulse_end_time - pulse_start_time
        distance = round(pulse_duration * 17150, 2)

        self._distance = distance

    def distance(self):
        """ get current distance """
        return self._distance
