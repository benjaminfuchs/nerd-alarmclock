#!/usr/bin/python3
# --------------------------------------------------------------------------
# Class definition of PumpControllerThread - utility functions for the pump
#
# Author: Benjamin Fuchs
# License: GPL3
#
# Website: https://github.com/benjaminfuchs/who_disposer
#
# --------------------------------------------------------------------------

import time
from threading import Thread

from nclock.Pump import Pump

class PumpControllerThread(Thread):
    """ LedControllerThread thread """

    def __init__(self, settings):
        """ Constructor """

        super(PumpControllerThread, self).__init__(name="PumpControllerThread")
        self._settings = settings
        self._stop_event = settings.stop_event
        self._pump = Pump(hex(settings.get_value('I2C','pump')))
        self._button = settings.get('button.status')
        self._sensor = settings.get('sensor.status')
        self._milliliter = settings.get('milliliter')
        settings.add_settings_listener('button.status', self.on_button)
        settings.add_settings_listener('sensor.status', self.on_sensor)

    def run(self):
        """ run method of thread """

        self._settings.log.msg(
            "PumpControllerThread: running PumpControllerThread...")
        while not self._stop_event.wait(0.2):
            if self._sensor == "on":
                self._pump.pump(self._milliliter)
                self._settings.inc("tank.count", True)
                time.sleep(1)
            elif self._sensor == "off":
                pass
            else:
                self._settings.log.msg(
                    "PumpControllerThread: [ERROR] Unkown sensor status (%s)" % str(self._sensor))

            if self._button == "short":
                self._pump.pump(self._milliliter)
            elif self._button == "off":
                pass
            else:
                self._settings.log.msg(
                    "PumpControllerThread: [ERROR] Unkown button status (%s)" % str(self._button))

        self._settings.log.msg("PumpControllerThread: shutdown")

    def on_button(self, name, old, new):
        """ process button changes """

        self._status = new

    def on_sensor(self, name, old, new):
        """ process sensor status changes """

        self._tank = new
