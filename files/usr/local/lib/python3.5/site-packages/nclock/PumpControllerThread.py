#!/usr/bin/python3
# --------------------------------------------------------------------------
# Class definition of PumpControllerThread - utility functions for the pump
#
# Author: Benjamin Fuchs
# License: GPL3
#
# Website: https://github.com/benjaminfuchs/who_disposer
#
# --------------------------------------------------------------------------

import time
from threading import Thread

from nclock.Pump import Pump


class PumpControllerThread(Thread):
    """ LedControllerThread thread """

    POLL_INTERVAL = 0.2

    def __init__(self, settings):
        """ Constructor """

        super(PumpControllerThread, self).__init__(name="PumpControllerThread")
        self._settings = settings
        self._settings.log.msg("PumpControllerThread: init")
        self._stop_event = settings.stop_event
        self._pump = Pump(0x60)
        self._last_time = time.time()
        self._milliliter = settings.get('milliliter')
        settings.add_settings_listener('sensor.status', self.on_sensor)
        settings.add_settings_listener('button.status', self.on_sensor)

    def run(self):
        """ run method of thread """

        self._settings.log.msg(
            "PumpControllerThread: running ...")
        while not self._stop_event.wait(PumpControllerThread.POLL_INTERVAL):
            pass

        self._pump.turnOffMotors()
        self._settings.log.msg("PumpControllerThread: shutdown")

    def on_sensor(self, name, old, new):
        """ process sensor changes """

        if new == "on":
            if time.time() - self._last_time > 60 * 10:
                self._pump.pump(self._milliliter + 1)
                self._settings.log.msg("PumpControllerThread: pumping long")
            else:
                self._pump.pump(self._milliliter)
                self._settings.log.msg("PumpControllerThread: pumping short")

            self._last_time = time.time()
            self._settings.inc("tank.count", True)
            time.sleep(2)

