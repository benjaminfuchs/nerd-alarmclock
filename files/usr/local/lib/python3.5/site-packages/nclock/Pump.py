#!/usr/bin/python3
# --------------------------------------------------------------------------
# Class definition of Pump
#
# Author: Benjamin Fuchs
# License: GPL3
#
# Website: https://github.com/benjaminfuchs/who_disposer
#
# --------------------------------------------------------------------------

from nclock.ext.PCA9685 import PCA9685

import time


class Pump():
    """ Led class """

    DIR = [
        'forward',
        'backward',
    ]

    def __init__(self, address):
        """ Constructor """
        self._pwm = PCA9685(0x40, debug=False)
        self._pwm.setPWMFreq(50)

        self.PWMA = 0
        self.AIN1 = 1
        self.AIN2 = 2
        self.PWMB = 5
        self.BIN1 = 3
        self.BIN2 = 4


    def turnOffMotors(self):
        """ recommended for auto-disabling motors on shutdown """
        self._mh.getMotor(1).run(Adafruit_MotorHAT.RELEASE)
        self._mh.getMotor(2).run(Adafruit_MotorHAT.RELEASE)
        self._mh.getMotor(3).run(Adafruit_MotorHAT.RELEASE)
        self._mh.getMotor(4).run(Adafruit_MotorHAT.RELEASE)


    def pump(self, milliliter):
        """ pump amount of milliliters """
        self.run(0, "forward", 30)
        time.sleep(milliliter)
        self.turnOffMotors(0)


    def run(self, motor, index, speed):
        if speed > 100:
            return
        if(motor == 0):
            self._pwm.setDutycycle(self.PWMA, speed)
            if(index == DIR[0]):
                self._pwm.setLevel(self.AIN1, 0)
                self._pwm.setLevel(self.AIN2, 1)
            else:
                self._pwm.setLevel(self.AIN1, 1)
                self._pwm.setLevel(self.AIN2, 0)
        else:
            self._pwm.setDutycycle(self.PWMB, speed)
            if(index == DIR[0]):
                self._pwm.setLevel(self.BIN1, 0)
                self._pwm.setLevel(self.BIN2, 1)
            else:
                self._pwm.setLevel(self.BIN1, 1)
                self._pwm.setLevel(self.BIN2, 0)


    def turnOffMotors(self, motor):
        if (motor == 0):
            self._pwm.setDutycycle(self.PWMA, 0)
        else:
            self._pwm.setDutycycle(self.PWMB, 0)
