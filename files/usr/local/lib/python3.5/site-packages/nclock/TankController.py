#!/usr/bin/python3
# --------------------------------------------------------------------------
# Class definition of TankController - utility functions for the tank
#
# Author: Benjamin Fuchs
# License: GPL3
#
# Website: https://github.com/benjaminfuchs/who_disposer
#
# --------------------------------------------------------------------------

import time


class TankController():
    """ TankController thread """

    def __init__(self, settings):
        """ Constructor """

        self._settings = settings
        self._settings.log.msg("TankController: init")
        self._stop_event = settings.stop_event
        self._warning = settings.get('tank.warning')
        self._empty = settings.get('tank.empty')
        self._size = settings.get('tank.size')
        self._milliliter = settings.get('milliliter')
        self._reset_time = 3
        self._button_start_time = None
        settings.add_settings_listener('tank.count', self.on_count)
        settings.add_settings_listener('button.status', self.on_button)

    def on_count(self, name, old, new):
        """ process count changes """

        if new * self._milliliter >= self._empty * self._size:
            self._settings.set('tank.state', 'empty')
        elif new * self._milliliter >= self._warning * self._size:
            self._settings.set('tank.state', 'warning')

    def on_button(self, name, old, new):
        """ process button changes """

        if new == "on":
            if old == "off":
                self._button_start_time = time.time()
            if self._button_start_time - time.time() >= self._reset_time:
                self._settings.set('tank.state', 'full')
                self._settings.log.msg(
                    "TankController: [INFO] tank full")
