#!/usr/bin/python3
# --------------------------------------------------------------------------
# Class definition of SensorsControllerThread - utility functions for the sensors
#
# Author: Benjamin Fuchs
# License: GPL3
#
# Website: https://github.com/benjaminfuchs/who_disposer
#
# --------------------------------------------------------------------------

import time
from threading import Thread

from nclock.Button import Button
from nclock.SRF02 import SRF02
from nclock.HCSR04 import HCSR04


class SensorsControllerThread(Thread):
    """ SensorsControllerThread thread """

    POLL_INTERVAL = 0.1

    def __init__(self, settings):
        """ Constructor """

        super(SensorsControllerThread, self).__init__(
            name="SensorsControllerThread")
        self._settings = settings
        self._settings.log.msg("SensorsControllerThread: init")
        self._stop_event = settings.stop_event
        self._settings.log.msg(
            "SensorsControllerThread: setting up %s" % settings.get_value('GPIO', 'button'))
        self._button = Button(int(settings.get_value('GPIO', 'button')))
        self._sensor_type = settings.get_value('SENSOR', 'ultraschall')
        if self._sensor_type == "SRF02":
            self._sensor = SRF02(0x70, settings.get('sensor.threshold'))
        elif self._sensor_type == "HCSR04":
            self._sensor = HCSR04(27, 18, settings.get('sensor.threshold'))
        else:
            self._settings.log.msg(
                "SensorsControllerThread: [ERROR] Unkown sensor type (%s)" % str(self._sensor_type))
        self._state = settings.get('state')
        self._button_count = 0
        self._button.add_listener(self._update_button)
        self._sensor.add_listener(self._update_sensor)
        self._button.start()
        self._sensor.start()

    def run(self):
        """ run method of thread """

        self._settings.log.msg(
            "SensorsControllerThread: running ...")
        if self._state == "starting":
            self._sensor.calibrate()
            self._settings.log.msg(
                "SensorsControllerThread: changing state to running")
            self._settings.set("state", "running")

        while not self._stop_event.wait(SensorsControllerThread.POLL_INTERVAL):
            if self._settings.get("button.status") == "on":
                self._button_count += 1
                if self._button_count > 10 / SensorsControllerThread.POLL_INTERVAL:
                    self._settings.log.msg(
                        "SensorsControllerThread: button (%s)" % "long")
                    self._settings.set("button.status", "long")
                    self._button_count = 0

        self._button.stop()
        self._sensor.stop()
        self._button.join()
        self._sensor.join()
        self._settings.log.msg("SensorsControllerThread: shutdown")

    def _update_button(self, state):
        """ check button status """

        name = "button.status"
        if state == "on":
            self._settings.log.msg("SensorsControllerThread: button on")
        else:
            self._settings.log.msg("SensorsControllerThread: button off")

        self._settings.set(name, state)

    def _update_sensor(self, state):
        """ check button status """

        name = "sensor.status"
        if state == "on":
            self._settings.log.msg(
                "SensorsControllerThread: sensor on")
        self._settings.set(name, state)
